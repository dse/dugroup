#!/usr/bin/perl
use warnings;
use strict;

use File::Basename qw(dirname basename);
use Getopt::Long;

our $VERSION = "2008-03-29";

our @BACKUPS = qw( *~ *.bak );
our @IMAGES  = qw( *.gif *.jpg *.jpeg *.png *.tif *.bmp *.xpm *.xbm );

our $USAGE = <<"END";
usage: dugroup [OPTION ...]
  -h, --help
  -b, --backups          Group backup files together
                         (@BACKUPS)
  -i, --images           Group image files together
                         (@IMAGES)
  -G, --group=NAME       start a group with the specified name
  -I, --include=PATTERN  add specified pattern to a group (* and ? supported)
  -v, --version          Display version and copyright info.
examples:
  -G OBJS -I '*.o' -I '*.ko' -I '*.so' -G SRCS -I '*.c' -I '*.cpp' -I '*.c++'
END

our $COPYRIGHT = <<"END";
This is dugroup version $VERSION.
Copyright (C) 2008 Darren Stuart Embry.

This program comes with ABSOLUTELY NO WARRANTY.  This is free software,
and you are welcome to redistribute it under the terms of the GNU General
Public License, Verison 2, available here:

http://dse.webonastick.com/dugroup/COPYING.txt
END

our @group_rules;
our $group_name;

our @OPTIONS = ("b|backups"   => sub { add_pattern("BACKUPS", @BACKUPS); },
		"i|images"    => sub { add_pattern("IMAGES", @IMAGES); },
		"G|group=s"   => \$group_name,
		"V|version"   => sub { print $COPYRIGHT; exit(0); },
		"I|include=s" => sub {
			if (defined($group_name)) {
				add_pattern($group_name, $_[1]);
			}
			else {
				warn("Cannot specify a -I option",
				     " without first specifying",
				     " a -G option.\n");
				usage();
				exit(1);
			}
		},
		"h|help" => sub { usage(); exit(0); }
	       );

sub usage {
	print($USAGE);
}

sub pattern_to_regex {
	# This is quite possibly the most hackish glob-to-regex converter
	# available.  Its major limitation is that it doesn't support
	# character classes or brace expansions.
	my ($pattern) = @_;
	$pattern =~ s{( \? | \* | [^\?\*]+ )}
		     {$1 eq "*" ? ".*" : $1 eq "?" ? "." : quotemeta($1)}gxe;
	my $regex = qr{^$pattern$};
	return $regex;
}

sub add_pattern {
	my ($group, @pattern) = @_;
	foreach my $pattern (@pattern) {
		my $regex = pattern_to_regex($pattern);
		push(@group_rules, [$regex, $group]);
	}
}

sub filename_to_group {
	my ($filename) = @_;
	foreach my $rule (@group_rules) {
		my ($regex, $group) = @$rule;
		return $group if $filename =~ $regex;
	}
	return undef;
}

###############################################################################

Getopt::Long::Configure(qw( bundling gnu_compat ));
Getopt::Long::GetOptions(@OPTIONS) or do { usage(); exit(1); };

my %list_groups;
my %groups;
my %group_total;

### $list_groups{"/foo"} => ["IMAGES", "BACKUPS", ...]
### $groups{"/foo"}{"IMAGES"} => [[5, "foo.jpg"], [10, "foo.gif"], ...]
### $group_total{"/foo"}{"IMAGES"} => 15

sub list_fakedirs {
	my ($pathname) = @_;
	if (exists($list_groups{$pathname})) {
		foreach my $xgroup (@{$list_groups{$pathname}}) {
			foreach my $xentry (@{$groups{$pathname}{$xgroup}}) {
				my ($xsize, $xbasename) = @$xentry;
				my $xpathname = "$pathname/$xgroup/$xbasename";
				print("$xsize\t$xpathname\n");
			}
			my $xgrouppathname = "$pathname/$xgroup";
			my $xtotal = $group_total{$pathname}{$xgroup};
			print("$xtotal\t$xgrouppathname\n");
			delete $groups{$pathname}{$xgroup};
			delete $group_total{$pathname}{xgroup};
		}
		delete $list_groups{$pathname};
	}
}

sub add_to_fakedir {
	my ($group, $size, $dirname, $basename) = @_;
	if (!exists($groups{$dirname}{$group})) {
		$list_groups{$dirname} ||= [];
		push(@{$list_groups{$dirname}}, $group);
	}
	$groups{$dirname}{$group} ||= [];
	$group_total{$dirname}{$group} += $size;
	push(@{$groups{$dirname}{$group}}, [$size, $basename]);
}

###############################################################################

while (<>) {
	chomp();
	unless (/^\s*(\d+)\s*(.*)$/) {
		print("$_\n");
		next;
	}
	my ($size, $pathname) = ($1, $2);
	my $dirname = dirname($pathname);
	my $basename = basename($pathname);

	list_fakedirs($pathname);

	my $group = filename_to_group($basename);
	if (defined($group)) {
		add_to_fakedir($group, $size, $dirname, $basename);
	}
	else {
		print("$_\n");
	}
}

